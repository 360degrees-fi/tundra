// For conditions of distribution and use, see copyright notice in license.txt

#include "StableHeaders.h"
#include "WorldInputModule.h"
#include "InputEvents.h"
#include "InputStateMachine.h"

namespace Input
{
    WorldInputModule::WorldInputModule () 
        : ModuleInterfaceImpl (type_static_)
    {
    }

    WorldInputModule::~WorldInputModule ()
    {
    }

    // virtual
    void WorldInputModule::Load()
    {
        LogInfo("Module " + Name() + " loaded.");
    }

    // virtual
    void WorldInputModule::Unload()
    {
        LogInfo("Module " + Name() + " unloaded.");
    }

    // virtual
    void WorldInputModule::Initialize()
    {
        //GetFramework()-> GetServiceManager()-> 
        //    RegisterService (Foundation::Service::ST_Input, this);

        Foundation::EventManagerPtr eventmgr = GetFramework()-> GetEventManager();

        event_category_id_t eid = eventmgr-> RegisterEventCategory ("Input");

        eventmgr-> RegisterEvent (eid, Input::Events::MOVE_FORWARD_PRESSED, "MoveForwardPressed");
        eventmgr-> RegisterEvent (eid, Input::Events::MOVE_FORWARD_RELEASED, "MoveForwardReleased");

        eventmgr-> RegisterEvent (eid, Input::Events::PY_RESTART, "PyRestart");
        eventmgr-> RegisterEvent (eid, Input::Events::PY_RUN_COMMAND, "PyRunCommand");

        eventmgr-> RegisterEvent (eid, Input::Events::KEY_PRESSED, "KeyPressed");
        eventmgr-> RegisterEvent (eid, Input::Events::KEY_RELEASED, "KeyReleased");

        eventmgr-> RegisterEvent (eid, Input::Events::INWORLD_CLICK, "InWorldClick");

        eventmgr-> RegisterEvent (eid, Input::Events::LEFT_MOUSECLICK_PRESSED, "LeftMouseClickPressed");
        eventmgr-> RegisterEvent (eid, Input::Events::LEFT_MOUSECLICK_RELEASED, "LeftMouseClickReleased");
        eventmgr-> RegisterEvent (eid, Input::Events::RIGHT_MOUSECLICK_PRESSED, "RightMouseClickPressed");
        eventmgr-> RegisterEvent (eid, Input::Events::RIGHT_MOUSECLICK_RELEASED, "RightMouseClickReleased");

        eventmgr-> RegisterEvent (eid, Input::Events::INWORLD_CLICK_BUILD, "InWorldClickBuild");
        eventmgr-> RegisterEvent (eid, Input::Events::INWORLD_CLICK_BUILD_REL, "InWorldClickBuildReleased");

        eventmgr-> RegisterEvent (eid, Input::Events::MOUSEDRAG, "MouseDrag");
        eventmgr-> RegisterEvent (eid, Input::Events::MOUSEDRAG_STOPPED, "MouseDragStopped");

        // Listen for QEvents generated by the UIView, and generate "Input" category events
        state_machine_ = new WorldInputLogic (GetFramework());
        state_machine_-> start();
    }

    // virtual 
    void WorldInputModule::Uninitialize()
    {
        //GetFramework()->GetServiceManager()->UnregisterService(key_mapping_);

        LogInfo("Module " + Name() + " uninitialized.");
    }

    // virtual 
    void WorldInputModule::Update(f64 frametime)
    {
        {
            PROFILE(WorldInputModule_Update);
            
            state_machine_-> Update (frametime);
        }
        RESETPROFILER;
    }
}

extern "C" void POCO_LIBRARY_API SetProfiler(Foundation::Profiler *profiler);
void SetProfiler(Foundation::Profiler *profiler)
{
    Foundation::ProfilerSection::SetProfiler(profiler);
}


