/**

\page ThreadTask Threaded task system

	Creating background worker threads requires some repeated work (setting up the thread, managing work request & result queues in a thread-safe way).
	The threaded task system helps to avoid the repeated work and to focus on the work itself.

	The system consists of four classes: Foundation::ThreadTask, Foundation::ThreadTaskRequest, Foundation::ThreadTaskResult and Foundation::ThreadTaskManager.

	\section threadtask_TTS ThreadTask

	Foundation::ThreadTask manages one thread of background work. It is an abstract class, which you have to subclass and implement the Work() function to perform 
	the actual threaded processing.	 ThreadTasks also have a task description string, which should be uniquely defined for each kind of work. The Work() function 
	can either produce a result and terminate (one-shot mode), or serve requests in a loop until requested to terminate. Both modes of operation are described below in detail.

	\section threadtaskrequest_TTS ThreadTaskRequest
	
	Foundation::ThreadTaskRequest is the means to communicate units of work to a worker thread. Think of it as function call parameters. By default the class
	is empty: subclass and add the parameters you need. ThreadTaskRequests are relayed through shared pointers, so a new request should always be allocated from the heap
	with new and wrapped inside a shared pointer.

	\section threadtaskresult_TTS ThreadTaskResult
	
	Foundation::ThreadTaskResult is used by a worker thread to communicate results of work back to the application. It is subclassed from Foundation::EventDataInterface, 
        so that task results can also be sent as events; there is an added field that stores the task description of the ThreadTask that produced the result. Subclass and 
	add the parameters you need. Like ThreadTaskRequest, ThreadTaskResults are relayed through shared pointers, and have to be allocated from the heap.

	\section threadtaskmanager_TTS ThreadTaskManager
	
	Foundation::ThreadTaskManager can optionally take ownership of individual ThreadTasks and handle giving requests / getting results from them. It will also automatically
	delete finished ThreadTasks, and optionally send the finished tasks as \ref EventSystem "events". The ThreadTaskManager is necessary for ThreadTasks that 
        produce results in a continuous loop; for one-shot operation a ThreadTask can operate by itself.

	The framework contains a default ThreadTaskManager, which will send finished work results on each iteration of the viewer main loop as events. Use 
	Foundation::FrameWork::GetThreadTaskManager() to acquire it. Additionally, you are free to create more ThreadTaskManagers for your own purposes, as necessary.

	\section examples_TTS Code examples

	In the examples below, the class names OwnThreadTask, OwnThreadTaskRequest & OwnThreadTaskResult are used to represent the subclassed task, request & result respectively.

	Note that care should be taken to ensure that the request & result objects are of the correct class; one way to do it is to use boost::dynamic_pointer_cast and to see 
	that the pointer is non-null. There also exist templated versions of the request/result functions that perform the dynamic_pointer_cast automatically.

	\subsection oneshot_TTS One-shot operation
	
	One-shot operation for worker threads is simplest, as one can simply create the ThreadTask object and add a ThreadTaskRequest to it; at this point the Work() function
	starts executing in a separate thread. One can then check by the GetResult() function to see if the worker thread has produced a result. 
	
	Setup & adding a request:

	\code
	Foundation::ThreadTaskPtr task(new OwnThreadTask()); // Create task

	OwnThreadTaskRequestPtr request(new OwnThreadTaskRequest()); // Create request object
	request->parameter1_ = something; // Just some example parameters
	request->parameter2_ = something_else;

	task->AddRequest<OwnThreadTaskRequest>(request); // First request will start the thread

	\endcode

	Checking for task result:

	\code

	OwnThreadTaskResultPtr result = task->GetResult<OwnThreadTaskResult>();
	if (result)
	{
	    // Result arrived & is of the right type: do something with it...
	}

	\endcode
	
	OwnThreadTask constructor and work function:

	\code
	
	OwnThreadTask::OwnThreadTask() : ThreadTask("SecretNumberGenerator") // An example task description
	{
	}
	
	void OwnThreadTask::Work()
	{
	    OwnThreadTaskRequestPtr request = GetNextRequest<OwnThreadTaskRequest>(); // There should be a request when we get here...
	    if (!request) // ...But in the case there isn't or if it's the wrong type, return without producing a result
	        return;

	    Core::uint secret_number = PerformCalculation(request->parameter1_, request->parameter2_); // Do something with the request parameters, just an example	    

	    OwnThreadTaskResultPtr result(new OwnThreadTaskResult()); // Create result object
	    result->return_value_ = secret_number;

	    SetResult<OwnThreadTaskResult>(result); // Set final result & return from work function
	}

	\endcode	

	\subsection continuous_TTS Continuous operation

	In continuous operation, the Work() function loops, checking on each iteration whether it should keep running, and whether requests have arrived. There is a function 
	WaitForRequests() which lets the work thread sleep until there are requests; it is very much recommended to be used, so that threads with nothing to do don't use 
	unnecessary CPU time.
  
	Because SetResult() allows only one result to be stored at a time, the results have to be queued somewhere. This is why in continuous mode it is necessary to register the 
	task into a Foundation::ThreadTaskManager. In the example below, the framework's thread task manager is used, and events are used to check for the result.

	Setup, adding to the ThreadTaskManager, and adding a request:

	\code

	Foundation::ThreadTaskPtr task(new OwnThreadTask()); // Create task
	Foundation::ThreadTaskManagerPtr manager = framework_->GetThreadTaskManager();

	framework_->GetThreadTaskManager()->AddThreadTask(task);

	OwnThreadTaskRequestPtr request(new OwnThreadTaskRequest()); // Create request object
	request->parameter1_ = something; // Just some example parameters
	request->parameter2_ = something_else;		

	// Now there are two ways to add the request: either directly to the task as in the one-shot example
	// or via the task manager, using the task description. Use the second method, as that's something new
	manager->AddRequest("SecretNumberGenerator", request);
	
	\endcode

	Checking for task result (by handling a task event):

	\code

	bool HandleEvent(Core::event_category_id_t category_id, Core::event_id_t event_id, Foundation::EventDataInterface* data)
	{
	    if (category_id == framework_->GetEventManager()->QueryEventCategory("Task"))
	    {
	        if (event_id == Task::Events::REQUEST_COMPLETED)
	        {
	            OwnThreadTaskResult* result = dynamic_cast<OwnThreadTaskResult*>(data);
	            if (result) // Make sure result is of correct type
	            {
	                // Do something with result...
	                return true; // Event handled: should not be propagated further
	            }
	        }
	    }
	    return false; // Event not handled
	}

	\endcode

	Work function for continuous operation:

	\code

	void OwnThreadTask::Work()
	{
	    while (ShouldRun()) // Keep running until stop requested
	    {
	        WaitForRequests(); // Wait until either a request arrives or stop requested
	        OwnThreadTaskRequestPtr request = GetNextRequest<OwnThreadTaskRequest>();
	        if (request) // Was there a request?
	        {
	            Core::uint secret_number = PerformCalculation(request->parameter1_, request->parameter2_); 

	            OwnThreadTaskResultPtr result(new OwnThreadTaskResult());
	            result->return_value_ = secret_number;

	            QueueResult<OwnThreadTaskResult>(result); // Queue result to thread task manager
	        }
	    }
	}

	\endcode

	\section events_TTS Thread task events

	The threaded task system defines one event: Task::Events::REQUEST_COMPLETED, which is sent when a work result has arrived. Event data will always be a subclass of 
	ThreadTaskResult. These events are sent by the function Foundation::ThreadTaskManager::SendResultEvents().
*/
