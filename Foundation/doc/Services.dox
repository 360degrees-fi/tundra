namespace Foundation
{
/**

\page ModuleServices Module services

	Each module can offer one or more services to other modules. Services
	should be used when simple events (see \ref EventSystem "Event system") are not
	sufficient for inter-module communications.
	
	All modules offering services to other modules must register with the ServiceManager.
        The services must be registered when module is initialized and unregistered
        when they are uninitialized. Each module is responsible for managing the actual
        classes behind the service.
        
    \section using_services Using services

		Services can be queried by type by either using ServiceManager::GetService() or
		the shortcut provided in Framework: Framework::GetService().
		Example:
		\verbatim
Foundation::TestServiceInterface *test_service = framework_->GetServiceManager()->GetService<Foundation::TestServiceInterface>(Foundation::Service::ST_Test);
		\endverbatim
		

        It is recommended to access other modules through service interfaces, it generally
        leads to less trouble. It is however possible to access modules directly, but it
        leads to a direct dependency between the modules. See \ref ModuleArchitecture 
        "Module Architecture" for more info.
        
        If you wish to access another module's services in initalization phase, either
        access the service in post init (ModuleInterface::PostInitialize()), or make
        it so your module depends on the service provider's module, so it gets
        initialized first.
        
        
\attention <strong>It is assumed most of the core modules are always present, and thusly
        it is safe to store pointers to those module's services. However not all
        modules may be present at all times and some modules may get loaded / unloaded
        at runtime. For this to work, the service must be queried from the ServiceManager
        each frame when doing synchronized update. Otherwise the service may disappear
        from under you. </strong>

        How modules can access other modules' services? There are two ways:
           - Access the module directly using ModuleManager.
           - Use service manager to query for registered services. Each service is associated
             with a type, and only one type of service can be registered at any one time.
             If two modules attempt to register same type of service, results are undefined.
        
        How module can offer a (new) service to other modules?
           - Create new interface for the service in Interfaces-sub project, subclassing ServiceInterface -class.
           - Include the new .h file in ServiceInterfaces.h
           - Add the service type to Service::Type enumeration.
           - Subclass the service class from the new service interface
           - Add the service registering and unregistering to the parent module.
          
    \section registering_services Registering services
    
        When module gets initialized, the services it provides should register to the servicemanager.
		\verbatim
void TestModule::Initialize()
{
	framework_->GetServiceManager()->RegisterService(Foundation::Service::ST_Test, &test_service_);
}
		\endverbatim
		
	    Similarly when module gets uninitialized, the services should unregister, so other modules
	    won't be able to try to use services that in reality no longer exist.
		\verbatim
void TestModule::Uninitialize()
{
	framework_->GetServiceManager()->UnregisterService(&test_service_);
}
		\endverbatim
	
*/
}
