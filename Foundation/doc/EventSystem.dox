/**

\page EventSystem Viewer event system

	Below is a description on how to use the viewer's internal event system and
	the event manager. The event system is one way for viewer modules to communicate
	between each other without explicit dependencies.


	\section acquiring_ES Acquiring the EventManager	

	To use the event system, a reference to the EventManager within the Foundation framework is needed.
	Use Foundation::Framework::GetEventManager() to acquire.


	\section events_ES Events
	
	When sent, an event in the event system is made up of 3 things: event category ID, event ID, 
        and an optional pointer to a event-specific data structure. The category ID and event ID 
	identify the event to the receiver, while the data structure, if necessary, contains data specific
	to the event.

	In the current system, events are not actually queued in any way, an event does not exist 
	'outside' the time when it is sent and handled.


	\subsection categoryregistering_ES Event category ID's, registering

	Each module that is interested in sending events should register an event category, or possibly 
	several, using Foundation::EventManager::RegisterEventCategory(). The event categories are identified with 
	text strings, for example "Renderer" or "Input". When registering a category, the category name 
	is associated with a numeric category ID for quick access and returned to the caller.

	Typically, event categories should be registered during the module's Initialize() function.

	Example of registering an event category:

\code
event_category_ = framework_->GetEventManager()->RegisterEventCategory("Input");	
\endcode

	\subsection categoryquerying_ES Event category ID's, querying

	To be able to identify events sent by other modules, it is necessary to query for 
	other event category ID's. There are many ways to do this, for example these two:

	1) When receiving an event, query the event category name from the category ID using
	   Foundation::EventManager::QueryEventCategoryName() and see if it matches what you were
	   expecting, for example "Input". This is not performance-optimal, but fine for events that
	   are not received very often.

	2) Query and store the event category ID's for all categories you are interested of during 
           your module's PostInitialize() function, using Foundation::EventManager::QueryEventCategory(). 
	   This should not be done in Initialize() because during that different modules are still
	   registering their own categories, and what is registered depends on module load order.
	   This way is better for performance, as when receiving events you can then compare just the
	   numeric category ID's to see into which category the event belongs to. 

	If querying by a category name that is unknown, the category ID 0 will be returned.

	Example of querying and storing event category, and checking for unknown:

\code
assetcategory_id_ = event_manager->QueryEventCategory("Asset");
        
if (assetcategory_id_ == 0 )
    LogWarning("Unable to find event category for Asset events!");
\endcode

	\subsection eventid_ES Event ID's
	
	Within an event category, a module can freely decide how to use event ID's. These are just numbers
	that are typically defined in an include file. See for example InputEvents.h

	For debugging purposes, event ID's within an event category should be registered using 
	Foundation::EventManager::RegisterEvent().


	\subsection eventdata_ES Event data structures

	Using an event data structure is optional; if it is not necessary, the pointer 
	to the data structure can be NULL when sending an event.

	But if a data structure is required, it needs to be subclassed from Foundation::EventDataInterface. 
	For clarity, a certain type of data structure should always correspond to a certain event ID of a 
	certain event category. For example the ASSET_READY event of the AssetModule always contains
	a pointer to a Asset::Event::AssetReady structure.

	The pointer to an event data structure should only assumed to be valid during the handling 
	of an event; the pointer should never be stored (it is typically a temporary object.)

	See for example InputEvents.h and AssetEvents.h for examples of defining event data structures.


	\section sendingevent_ES Sending an event

	To send an event, you need to know your event category ID, the event ID, and have an event data 
	structure ready if necessary. Then call Foundation::EventManager::SendEvent(). It will return 
	true if some module 'handled' the event, false otherwise.

	An example of preparing an event data structure (in this case, containing an entity ID) and sending the event:
	
\code
Scene::Events::SceneEventData event_data(currentEntityID_);
framework_->GetEventManager()->SendEvent(scene_event_category_, Scene::Events::EVENT_ENTITY_UPDATED, &event_data);
\endcode
	
	\section receivingevent_ES Receiving events

	Modules receive and handle events through their Foundation::ModuleInterface::HandleEvent() function. This function should return
	false if the module wants the event to propagate to other receivers, or true if the module 'handled'
	the event and does not wish for it to propagate further.

        To actually receive events, modules need to be registered as event subscribers. They are organized into a tree-
        structure which is read from the xml data file /data/event_tree.xml. In the data file, modules are referred to
        by their names. Additionally, modules need an integer priority number (higher number = higher priority), which
        decides the order in which HandleEvent() is called for siblings in the tree.
        
        An example subscriber tree data file, does not necessarily make sense:
        
\verbatim
<subscribers>
    <subscriber module="Renderer" priority="75" />
    <subscriber module="World Logic" priority="100">
    	<subscriber module="Gui" priority="100" />
    </subscriber>
</subscribers>
\endverbatim
        
        Here, the tree root has two children: Renderer and World Logic. The Renderer will have lower priority than World 
        Logic, so World Logic (and its child Gui) get the first opportunity to handle events.
        
        Modules can also be manually registered/unregistered into the subscriber tree by calling Foundation::EventManager::RegisterEventSubscriber()
        and Foundation::EventManager::UnregisterEventSubscriber(). Note that during handling of an event (ie. when HandleEvent() for any module is 
        being executed) the subscriber tree should not be attempted to be modified.

	An example event handler from the OgreRenderingModule, which watches for two distinct event categories and passes event handling to its member object:

\code
bool OgreRenderingModule::HandleEvent(
    Core::event_category_id_t category_id,
    Core::event_id_t event_id, 
    Foundation::EventDataInterface* data)
{
    if (!renderer_)
        return false;

    if (category_id == assetcategory_id_)
    {
        return renderer_->HandleAssetEvent(event_id, data);
    }

    if (category_id == resourcecategory_id_)
    {
        return renderer_->HandleResourceEvent(event_id, data);
    }

    return false;
}
\endcode

	\subsection requesttags_ES Request tags

	Various subsystems which implement handling of delayed requests (asset system, texture decoding)
	need a way to uniquely identify requests, so that they can pass back the request identification
	in an event that tells of the request having been fulfilled.

	The EventManager implements a simple way for handling this: it hands out unique 32-bit unsigned 
        integers which can serve as the request identifiers.

	Use Foundation::EventManager::GetNextRequestTag() when a new request identifier is needed.


	\subsection delayedevents_ES Delayed events

	Normally events are responded to immediately. There is also a possibility to send delayed events,
	using Foundation::EventManager::SendDelayedEvent(). An important difference is that now the
	event data must be retained for a longer time, so it should be allocated with new and wrapped
	inside a shared pointer (Foundation::EventDataPtr) that is passed along.

	Delayed events will be processed during the update cycle of the framework, after individual modules
	have been updated. The delay parameter is seconds; if it is 0, then the event will be sent 
	at the end of the current update cycle.

	Use delayed events with judgement; convoluted logic could be rather easily created with them!
	Also note that you will not get to know whether the event was handled by any subscribers.

*/
