Preparing Qt for use with Visual Studio 2008 and rex

This set of instructions is adapted from 
http://dcsoft.com/community_server/blogs/dcsoft/archive/2009/03/06/how-to-setup-qt-4-5-visual-studio-integration.aspx
(which was a bit outdated).

1. Download Qt source package from http://www.qtsoftware.com/downloads 
   Choose LGPL/Free -> Qt Framework only (Windows) -> Source code available on this link
   (direct link: http://get.qtsoftware.com/qt/source/qt-win-opensource-src-4.5.1.zip)

2. Extract zip and rename the created directory to something convenient, like C:\Qt (assumed below). Add a build output directory, like C:\Qt\build (assumed below).

3. Copy C:\Qt\qt\mkspecs to your build directory, C:\Qt\build

4. Add C:\Qt\bin to your path or run C:\Qt\bin\qtenv.bat

5. Open VS2008 command prompt, go to C:\Qt\qt and run 
     
    configure -platform win32-msvc2008 -opensource -prefix C:\Qt\build -no-qt3support -dbus -I "%NAALI_DEP_PATH%\dbus\include" -L "%NAALI_DEP_PATH%\dbus\lib" -openssl -I "%NAALI_DEP_PATH%\OpenSSL\include" -L "%NAALI_DEP_PATH%\OpenSSL\lib"

	* NOTE: Building QDBus*.dll may give you "could not include file x" fatal errors. Open the file that had the include error,
	        change the #include <something.h> to #include "something.h" and there errors should dissapear. After you have made correction run 'nmake' again,
			if new errors occur correct them in the same way. It's a strange error because the .h files are in the same folder as the .cpp file that
			tries to include them but this is how you correct it anyway.
    * NOTE: If you encounter a link error in a moc-related object, you can try deleting the mocinclude.tmp file in that directory.
            QtWebKit*.dll and QScript*.dll most propably will produce these moc errors, 
            you can go to the following folders and remove/rename the found mocinclude.tmp files
              - qt\src\3rdparty\webkit\WebCore\tmp\moc\release_shared
              - qt\src\3rdparty\webkit\WebCore\tmp\moc\debug_shared
              - qt\src\script\tmp\moc\release_shared
              - qt\src\script\tmp\moc\debug_shared
            After you have done this run nmake again and it will generate the mocinclude.tmp files with correct paths 
            and you build should succeed this time. If you do this before running nmake the first time you should not se moc errors.

6. In the same directory, run

    nmake

7. When the build is complete, run
    
    nmake install

6. If you want to just use Qt, add to your environment the variable QTDIR = C:\Qt. If you want to package Qt, take the result from C:\Qt\build.

7. Regenerate the VS project files from the cmake files. Remember to invoke cmake from a process that was created
   after steps 3 and 6 in order for the environment settings to take effect. This means restarting Visual Studio or
   any command prompts after changing the environment settings.

*  If configure and nmake doesn't work you can try to download built version of Qt SDK from the dependency svn. 
   See build-windows.txt.

