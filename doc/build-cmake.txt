Preparing build files (makefiles/VS project files)
--------------------------------------------------

To prepare or update system-specific build files with cmake, execute the command
	cmake . 

in the viewer root directory, which contains the top-level CMakeLists.txt file.

For Visual Studio 2008, it may be necessary to give the command 
	cmake -G "Visual Studio 9 2008"

The batch files cmake.bat and cmake_vs2008.bat also accomplish the same.


Adding new source code files and subprojects
--------------------------------------------

The CMakeLists files for individual subprojects (modules) find source files by wildcards (*.cpp *.h), so when new files are added, cmake only needs to be re-run to update the build files. When adding new subprojects, refer to existing CMakeLists files, and also add a corresponding add_subdirectory command to the top-level CMakeLists file.

For examples of executables, see rex & UnitTests subprojects.
For examples of static libraries, see Core & framework.
For examples of dynamic libraries, see GeometrySystem for instance.


Adding new external libraries
-----------------------------

When you add a new external library, make a new cmake module for the library in the CMakeModules directory. The module should define three macros:

FIND_LIBRARYNAME() - tries to find include/lib paths & files for the library, and preferably abort with an error if not found
INCLUDE_LIBRARYNAME() - adds the include/lib paths to the build enviroment
LINK_LIBRARYNAME() - actually adds the needed libraries to a build target called ${TARGET_NAME}

These macros can do platform-specific magic as needed. On Windows / Visual Studio ( if (MSVC) ... ) it should be assumed that lib/include files will be installed to the external_libs directory; find_package may not necessarily work as expected.

Check the existing modules (Boost, PoCo, Curl...) for examples.


For further reference
---------------------

Check http://www.cmake.org/ for documentation & tutorials.

