/**

\page NaaliScriptReference Naali Scripting Reference

Naali offers several mechanisms for adding scripts to your application. You can
 - write Naali modules using Python.
 - write application scripts that are invoked on startup using QtScript.
 - embed Python and QtScript scripts into objects in the scene by using EC_Script.    

\section NaaliPython Creating Naali modules using Python

PythonScriptModule manages so-called Naali Python modules, which are basically similar in purpose to the native C++ modules. They are however not visible to the C++ code like actual Naali modules are, but can only be called from C++ modules by doing tricks with either the Python module system or Qt signals. This is the first Naali scripting system which was used to develop the C++ internals so that they expose the APIs which are common to all scripting mechanisms now. 

Naali Python modules are application level scripts, similar to the application level Javascripts explained below, but they have some extra features: 1) Capability to receive internal Naali events (not exposed to JS at all) and 2) A plugin system which supports live reloading of code. Also Naali currently ships with a copy of the Python standard library, and of the small Circuits event library which is used to implement the forwarding Naali C++ events and the reloadable module support. Internal Naali events are currently necessary to for example handle logout & login to scenes when teleporting, when using Opensimulator servers. E.g. editing code needs to clear selection state upon logout.

These modules reside in bin/pymodules/ and the ones enabled in any *.ini file in that directory are loaded at startup (or upon pymodule reload). By convention, default.ini configures what is enabled by default in releases, and you can use whatever.ini to add your own. To register your module to the system, it must have an object that subclasses circuits.BaseComponent, which is the class to which you point in the .ini file. For an example of a minimal pymodule, see bin/pymodules/usr/sleeper.py . Another small example is bin/pymodules/apitest/pythonqt_gui.py which features using Naali UI API and Qt widgets.

The 'naali' namespace (Python module) is used to expose Naali internals (the Core API) to Python, and 'PythonQt' exposes all of Qt. So you can say 'import naali' or 'import PythonQt' to get to use those.
An interactive Python shell is included, which is handy for learning and testing API commands as it has autocompletion. The shell is currently not integrated to menus, but is opened with the 'alt-.' keycombo. For reloading all pymodules live, without needing to logout or restart Naali, press F11.

Several bundled features of Naali releases are implemented with this system, including the 3d editing of objects, Opensimulator estate management and the Ogre scene import & publishing functionality for the Taiga server. Also the Naali web browser GUI with the basic navigation buttons, and the old means to have web pages in the scene as MediaURLs and the LSL LoadURL command are implemented in corresponding Naali pymodules. Additionally there is a web (http) server for serving live camera images, and a WebSocket server to allow connecting to Naali from browser based clients.

\section NaaliApplicationQtScripts Writing Application Scripts using QtScript

JavaScriptModule manages the execution of <b>application-level scripts</b>, which are scripts that are not attached to any scene, server or an entity. These scripts are executed once during startup from the folder /bin/jsmodules/startup at the module PostInitialize time, and their contexts stay alive until application shutdown. Each application script file is executed in a separate context.  

\section ECScriptScripts Embedding scripts to a scene using EC_Script

The EC_Script component holds a reference to a script file. Script files are assets like meshes and materials, and are loaded using the built-in asset system. To add a script into an entity, add the EC_Script component into it using the Scene Structure window or the EC Editor window.

\image html ECScript.png

The <i>Script ref</i> attribute stores the actual asset reference address. To run the script, execute the <b>RunScript</b> Entity Action on the entity the EC_Script component is part of. If you check the <i>Run on load</i> attribute, the script will be loaded immediately when the component is added or the asset reference is changed, and manually invoking RunScript is not necessary.

\section JavaScriptExtensions Naali Extensions to QtScript

To be able to access the Naali Core APIs and the scene from your scripts, Naali provides your scripts with a set of predefined API objects. 

Additionally, Naali provides a small utility library of pre-created .js files that can be included into your script applications. These .js files are guaranteed to exists on any Naali installation, and do not have to be downloaded through the asset system.

\todo Document the .js file library.

\section EngineObject The Engine Object

Each script receives a predefined object called <b>engine</b>. This object represents the instance of the currently running script. It contains the following useful functions. 

<table style="width: 50%; margin: 20px; background-color: #F0F0FF; border: 1px solid black; border-spacing: 0px; ">
<tr style="border-style: none;"><td style="border-style: none;">
<span style="font-weight: bold; font-size: 1.15em;">engine.IncludeFile(assetRef)</span>

Includes the given .js file and executes it in the current engine context. 
 
QtScript (or ECMAScript/JavaScript) does not have a built-in <b>include</b> keyword. In Naali, you can however use this command to execute another .js file at the point where engine.IncludeFile is called.

The parameter <i>assetRef</i> can either be an asset reference URL or an absolute path on a local filesystem, e.g. "local://myscript.js", "http://www.someserver.com/myscript.js" and "C:/Tundra/myscript.js" are all valid.  If you specify a local filename, each client looks the file up locally and there is no network asset transfers included.

Note that inclusion of the same file multiple times during script execution is automatically prevented. It is as if each .js file had a #pragma once clause in them.

</td></tr></table>

<table style="width: 50%; margin: 20px; background-color: #F0F0FF; border: 1px solid black; border-spacing: 0px; ">
<tr style="border-style: none;"><td style="border-style: none;">
<span style="font-weight: bold; font-size: 1.15em;">engine.ImportExtension(extensionName)</span>

Imports a QtScript extension from a shared library.
 
By default, QtScripts are not able to operate on built-in Qt types, like QWidget, or QVector3D, because these types have not been introduced to the script engine. Naali uses the <a href="http://code.google.com/p/qtscriptgenerator/">QtScriptGenerator</a> library to generate <a href="http://doc.qt.nokia.com/4.7/qtscriptextensions.html">extension libraries</a> for the built-in Qt types.

Naali does not load all the possible extension libraries to each script by default, since this was profiled to cause a major performance impact on script-heavy scenes. Instead, the script issues a set of <b>engine.ImportExtension(extensionName)</b> commands on the extensions it wants to use. The possible extensions are "qt.core", "qt.gui", "qt.network", "qt.uitools", "qt.xml", "qt.xmlpatterns", "qt.phonon", "qt.webkit".

The extensions themselves are stored in the folder /bin/qtplugins/script. The folder /bin/qtplugins is added to Qt plugin search path on startup (only necessary on Windows).

Extensions cannot be loaded over the network, but are fixed to the installation.
</td></tr></table>

\section QtWidgetChildren The findChild function

When using the qt.gui extension to operate on hierarchies of QObjects, you'll quickly notice that the function QObject::findChild is a template function and cannot be accessed from QtScript. To work around this, Naali exposes the following global scope function:

<table style="width: 50%; margin: 20px; background-color: #F0F0FF; border: 1px solid black; border-spacing: 0px; ">
<tr style="border-style: none;"><td style="border-style: none;">
<span style="font-weight: bold; padding-left: 20px;">QObject findChild(QObject object, QString childName)</span>

This function looks at all the (grand)children of object, and returns the first one found that has the name 'childName'.   
</td></tr></table>

\section ConsoleAPIPrint The print function

For a simple way of getting lines of text to stdout, there is the following function.

<table style="width: 50%; margin: 20px; background-color: #F0F0FF; border: 1px solid black; border-spacing: 0px; ">
<tr style="border-style: none;"><td style="border-style: none;">

<span style="font-weight: bold; padding-left: 20px;">print(QString text)</span>

This function prints the given lines of text directly to console stdout. This output is different than the built-in text logging channel in the Console API (by default accessible with the F1 key). On Windows, if you are running the application from a release installer, or built it with WINDOWS_APP set, the text console will not be visible, unless you manually run the application from a command line window. 

</td></tr></table>

\section QtScriptExplicitRef Specifying Asset Dependencies

When parsing the script file, Tundra takes any strings found in each engine.IncludeFile() function call, and interprets them as asset references. This means that if you have for example a line engine.IncludeFile("http://myserver.com/myscript.js"), this script file is loaded in before the main script is executed.

Asset dependencies can be also explicitly speficied. This specification is stored in a commented out line, in the form <i>// !ref: http://myserver.com/myscript.js</i>.

\section CoreAPIObjects The Core API Objects

The whole \ref CoreAPIList "Naali Core API" is exposed to QtScript through the following variable names:
 - The UI API: \ref NaaliUi "ui".
 - The UI service: \ref UiServiceInterface "uiservice". 
 - The Frame API: \ref Frame "frame".
 - The Input API: \ref Input "input".
 - The Console API: \ref ScriptConsole "console".
 - The Asset API: \ref AssetAPI "asset".
 - The Renderer service of OgreRenderingModule: \ref Renderer "renderer".
 - The Physics subsystem: \ref PhysicsModule "physics".
 - The SceneInteract object: \ref SceneInteract "sceneinteract".
 - The Client API: \ref Client "client".
 - The Server API \ref Server "server".   

\section SceneShortcutObjects Scene Shortcut Names in QtScript

For conveniency, when embedding scripts into scene entities using EC_Script, JavaScriptInstance populates the following two special objects. 

<table style="width: 50%; margin: 20px; background-color: #F0F0FF; border: 1px solid black; border-spacing: 0px; ">
<tr style="border-style: none;"><td style="border-style: none;">
<span style="font-weight: bold; font-size: 1.15em;">me: A pointer to the current Entity.</span>

<b>me</b> is a special name that refers to the instance of the Entity that stores the EC_Script that the current script is contained in. This allows you to create scripts that have a notion of identity, without having to build separate mechanisms for fetching and identifying the current entity from the scene.
</td></tr></table>

<table style="width: 50%; margin: 20px; background-color: #F0F0FF; border: 1px solid black; border-spacing: 0px; ">
<tr style="border-style: none;"><td style="border-style: none;">
<span style="font-weight: bold; font-size: 1.15em;">scene: A pointer to the current Scene.</span>

<b>scene</b> is a special name that refers to the SceneManager instance that the current script component is part of. Use this name to access the whole scene.
</td></tr></table>  

\section ScriptSamples Script Samples 
 
This section contains a list of scripting samples that can be used as a starting point for learning Naali scripting. You can find various examples and small snippets of scripts written in Python and QtScript that demonstrate how to use the Naali Core APIs and how to interact with the different Entity-Components.

<table>
<tr>
<td style="vertical-align:top;">
<h2>Module</h2>
- Accessing modules from a script.

<h2>Event</h2>
- Listening for an event.
- Posting events.
- Creating own events.

<h2>Config</h2>
- Reading and writing configuration data.

<h2>Input</h2>
- Reading keyboard events.
- Reading mouse input.
- Using ECInputMapper.

<h2>UI</h2>
- Loading and showing UI assets.
- Creating new UI elements.

</td>
<td style="vertical-align:top;">
<h2>Scene</h2>
- Accessing scene entities and components.
- Creating and deleting new EC data.
- Importing and exporting scene content. 
- Working with Entity Actions.
- Component replication modes.
       
<h2>Asset</h2>
- Requesting assets.
- Creating new assets.

<h2>Console</h2>
- Invoking console commands.
- Registering new console commands.

<h2>Connection</h2>
- Accessing the server connection.

<h2>Server</h2>
- Accessing the client connections.

</td>
</tr>
</table>

  
 */