/**

\page NaaliScriptReference Naali Scripting Reference

Naali offers several mechanisms for adding scripts to your application. You can
 - write Naali modules using Python.
 - write application scripts that are invoked on startup using QtScript.
 - embed Python and QtScript scripts into objects in the scene by using EC_Script.    

\section NaaliPython Creating Naali modules using Python

\todo write this section.

\section NaaliApplicationQtScripts Writing Application Scripts using QtScript

JavaScriptModule manages the execution of <b>application-level scripts</b>, which are scripts that are not attached to any scene, server or an entity. These scripts are executed once during startup from the folder /bin/jsmodules/startup at the module PostInitialize time, and their contexts stay alive until application shutdown. Each application script file is executed in a separate context.  

\section ECScriptScripts Embedding scripts to a scene using EC_Script

The EC_Script component holds a reference to a script file. Script files are assets like meshes and materials, and are loaded using the built-in asset system. To add a script into an entity, add the EC_Script component into it using the Scene Structure window or the EC Editor window.

\image html ECScript.png

The <i>Script ref</i> attribute stores the actual asset reference address. To run the script, execute the <b>RunScript</b> Entity Action on the entity the EC_Script component is part of. If you check the <i>Run on load</i> attribute, the script will be loaded immediately when the component is added or the asset reference is changed, and manually invoking RunScript is not necessary.

\section JavaScriptExtensions Naali Extensions to QtScript

To be able to access the Naali Core APIs and the scene from your scripts, Naali provides your scripts with a set of predefined API objects. 

Additionally, Naali provides a small utility library of pre-created .js files that can be included into your script applications. These .js files are guaranteed to exists on any Naali installation, and do not have to be downloaded through the asset system.

\todo Document the .js file library.

\section EngineObject The Engine Object

Each script receives a predefined object called <b>engine</b>. This object represents the instance of the currently running script. It contains the following useful functions. 

<table style="width: 50%; margin: 20px; background-color: #F0F0FF; border: 1px solid black; border-spacing: 0px; ">
<tr style="border-style: none;"><td style="border-style: none;">
<span style="font-weight: bold; font-size: 1.15em;">engine.IncludeFile(filename)</span>

Includes the given .js file and executes it in the current engine context.
 
QtScript (or ECMAScript/JavaScript) does not have a built-in <b>include</b> keyword. In Naali, you can however use the <b>engine.IncludeFile(filename.js)</b> function to execute another .js file at the point where engine.IncludeFile is called.

Note that inclusion of the same file multiple times during script execution is automatically prevented.

\todo Currently, the filename that is specified into IncludeFile is interpreted locally, relative to the current working directory (the bin/ directory), but in the future, the Naali asset system will be used.

</td></tr></table>

<table style="width: 50%; margin: 20px; background-color: #F0F0FF; border: 1px solid black; border-spacing: 0px; ">
<tr style="border-style: none;"><td style="border-style: none;">
<span style="font-weight: bold; font-size: 1.15em;">engine.ImportExtension(extensionName)</span>

Imports a QtScript extension from a shared library.
 
By default, QtScripts are not able to operate on built-in Qt types, like QWidget, or QVector3D, because these types have not been introduced to the script engine. Naali uses the <a href="http://code.google.com/p/qtscriptgenerator/">QtScriptGenerator</a> library to generate <a href="http://doc.qt.nokia.com/4.7/qtscriptextensions.html">extension libraries</a> for the built-in Qt types.

Naali does not load all the possible extension libraries to each script by default, since this was profiled to cause a major performance impact on script-heavy scenes. Instead, the script issues a set of <b>engine.ImportExtension(extensionName)</b> commands on the extensions it wants to use. The possible extensions are "qt.core", "qt.gui", "qt.network", "qt.uitools", "qt.xml", "qt.xmlpatterns", "qt.phonon", "qt.webkit".

The extensions themselves are stored in the folder /bin/qtplugins/script. The folder /bin/qtplugins is added to Qt plugin search path on startup (only necessary on Windows).

Extensions cannot be loaded over the network, but are fixed to the installation.
</td></tr></table>

\section QtWidgetChildren The findChild function

When using the qt.gui extension to operate on hierarchies of QObjects, you'll quickly notice that the function QObject::findChild is a template function and cannot be accessed from QtScript. To work around this, Naali exposes the following global scope function

<span style="font-weight: bold; padding-left: 20px;">QObject findChild(QObject object, QString childName)</span>

This function looks at all the (grand)children of object, and returns the first one found that has the name 'childName'.   

\section CoreAPIObjects The Core API Objects.

The whole \ref CoreAPIList "Naali Core API" is exposed to QtScript through the following variable names:
 - The UI API: \ref NaaliUi "ui".
 - The UI service: \ref UiServiceInterface "uiservice". 
 - The Frame API: \ref Frame "frame".
 - The Input API: \ref Input "input".
 - The Console API: \ref ScriptConsole "console".
 - The Asset API: \ref AssetAPI "asset".
 - The Renderer service of OgreRenderingModule: \ref Renderer "renderer".
 - The Physics subsystem: \ref PhysicsModule "physics".
 - The SceneInteract object: \ref SceneInteract "sceneinteract".
 - The Client API: \ref Client "client".
 - The Server API \ref Server "server".   

\section SceneShortcutObjects Scene Shortcut Names in QtScript

For conveniency, when embedding scripts into scene entities using EC_Script, JavaScriptInstance populates the following two special objects. 

<table style="width: 50%; margin: 20px; background-color: #F0F0FF; border: 1px solid black; border-spacing: 0px; ">
<tr style="border-style: none;"><td style="border-style: none;">
<span style="font-weight: bold; font-size: 1.15em;">me: A pointer to the current Entity.</span>

<b>me</b> is a special name that refers to the instance of the Entity that stores the EC_Script that the current script is contained in. This allows you to create scripts that have a notion of identity, without having to build separate mechanisms for fetching and identifying the current entity from the scene.
</td></tr></table>

<table style="width: 50%; margin: 20px; background-color: #F0F0FF; border: 1px solid black; border-spacing: 0px; ">
<tr style="border-style: none;"><td style="border-style: none;">
<span style="font-weight: bold; font-size: 1.15em;">scene: A pointer to the current Scene.</span>

<b>scene</b> is a special name that refers to the SceneManager instance that the current script component is part of. Use this name to access the whole scene.
</td></tr></table>  

\section ScriptSamples Script Samples 
 
This section contains a list of scripting samples that can be used as a starting point for learning Naali scripting. You can find various examples and small snippets of scripts written in Python and QtScript that demonstrate how to use the Naali Core APIs and how to interact with the different Entity-Components.

<table>
<tr>
<td style="vertical-align:top;">
<h2>Module</h2>
- Accessing modules from a script.

<h2>Event</h2>
- Listening for an event.
- Posting events.
- Creating own events.

<h2>Config</h2>
- Reading and writing configuration data.

<h2>Input</h2>
- Reading keyboard events.
- Reading mouse input.
- Using ECInputMapper.

<h2>UI</h2>
- Loading and showing UI assets.
- Creating new UI elements.

</td>
<td style="vertical-align:top;">
<h2>Scene</h2>
- Accessing scene entities and components.
- Creating and deleting new EC data.
- Importing and exporting scene content. 
- Working with Entity Actions.
- Component replication modes.
       
<h2>Asset</h2>
- Requesting assets.
- Creating new assets.

<h2>Console</h2>
- Invoking console commands.
- Registering new console commands.

<h2>Connection</h2>
- Accessing the server connection.

<h2>Server</h2>
- Accessing the client connections.

</td>
</tr>
</table>

  
 */