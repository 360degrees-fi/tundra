/**

\page RexLogic_Module RexLogic module

The RexLogic module is the "heart" of the viewer. It handles all the client-side logic that is related to connecting
to and persisting in an OpenSim/ModRex server. While several other modules in the project aim to be
generic and free from any OpenSim-speficic functionality, this module is the place where all the OpenSim-centric
features are implemented.

Some modules in the project can be thought as "service" modules - they work in the background to provide other 
modules with different services. RexLogic is not a service module in that sense, although other modules can call it
directly for their own purposes.

The following describes the core set of OpenSim features handled by RexLogic.

\section OpenSimScene_RL OpenSim scene
	
The OpenSim scene consists of a hardcoded 256x256 <b>terrain grid</b>, a <b>skybox</b> and a 
<b>water plane</b>. The scene contains objects that are either <b>prims</b> or <b>avatars</b>. A <b>prim</b> is the atomic
entity in the OpenSim world. Its appearance can be customized by a few parameters and it has a few features for example
for attaching a small dynamic point light or a piece of script code to it. Each connected client is associated with a
single <b>avatar</b> object in the world. The avatar can dynamically move in the world based on the network input sent
by the client.

Realxtend aims for a more generic (in sense of extensibility) and visually impacting environment than what OpenSim 
currently has to offer. The OpenSim scene model is far from being suitable for our purposes and so the new viewer models
the scene in a totally different way. For a closer look, see \ref SceneModelPage.

One of the responsibilities of RexLogic is to perform the mapping between OpenSim and Realxtend scene models. This mapping
occurs naturally when responding to SLUDP network messages, so no duplicate clone of an OpenSim-structured world is maintained.
Unfortunately because the server does not store the same information in the scene as we do and since we cannot currently 
extend the SLUDP protocol to reflect our scene model, the usefulness of the Realxtend entity-component scene model is a 
bit impaired. One of the major upcoming tasks is to investigate how to extend or replace the protocol or the server to 
support storing our custom data.

The following RexLogic objects deal with scene management:
	- \ref RexLogic::Avatar
	- \ref RexLogic::AvatarController
	- \ref RexLogic::Primitive
	- \ref RexLogic::Terrain
	
\section Connectivity_RL Server connectivity

RexLogic pops up a Login window when you start the viewer. The server connection itself is performed in OpenSimProtocol module,
but RexLogic uses the following classes to manage the connection state:
	- \ref RexLogic::RexLoginWindow
	- \ref RexLogic::NetworkStateEventHandler
	
\section Movement_RL Input and movement

The following object in RexLogic handle keyboard and mouse input and pass use it to drive avatar or camera movement:
	- \ref RexLogic::AvatarController
	- \ref RexLogic::CameraController
	- \ref RexLogic::InputEventHandler
	- \ref RexLogic::InputStateInterface
*/
