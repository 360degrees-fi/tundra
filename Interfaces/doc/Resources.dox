/**

\page Resources Using resources

	Below is a description on how to use resources. While assets are raw binary data, resources are assets decoded to an usable 	form.

	Different types of resources inherit from the base class Foundation::ResourceInterface.

	There is no centralized place to ask resources from, unlike the \ref AssetModule for assets. Currently, raw decoded texture resources can be requested from the texture decoder service (Foundation::TextureServiceInterface) and renderer-related resources from the renderer service (\ref OgreRenderingModule).


	\section identifyingresources_RES Identifying resources

	Resources are identified with an ID, which is usually the same as the ID of the asset the resource is created from.
	Furthermore, each resource type is identified with its type name. The ID,type -pair is used when requesting a resource, similar to assets.


	\section resourcereferences_RES Resource references

	Resources may depend on other resources, for example a material script resource depends on texture resources. To model this,
	Foundation::ResourceInterface contains a vector of ID,type -pairs that lists the depended upon resources. Currently the protocol does not support storing resource references directly, so the references are resolved programmatically at load-time by examining the asset data (for example, going through the material script text to see what textures it refers to.)


	\section resourceevents_RES Resource events

	Events with the category "Resource" will be sent informing of the status of resource requests. These are defined in ResourceInterface.h. The events are sent by the modules implementing the resource services; other modules should not send them.

	\subsection resourceready_RES RESOURCE_READY

	When a resource has been decoded (this involves first downloading enough or whole of the underlying binary asset), a RESOURCE_READY event will be sent, with the event data structure Resource::Events::ResourceReady. This event is sent for each request of the same resource, with a matching request tag. When handling this event, true (= event handled and should not be propagated) should only be returned if the request tag matches your request. It is safe to return false always.		
*/
