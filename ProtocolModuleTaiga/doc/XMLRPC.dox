/**

\page XMLRPC Performing custom XMLRPC calls.

@p XMLRPCEPI is an interface for <a href = "http://xmlrpc-epi.sourceforge.net/api_docs/xmlrpc.c.html" > XMLRPC-epi </a> library which can be used to generate XML-RPC 
requests and read data from XML-RPC replies. Current implementation uses <a href = "http://curl.haxx.se/" > libcURL </a> to transfer the generated XML-RPC request over
socket to given server address.

An example of a typical XML-RPC request would be:
@code

<?xml version="1.0"?>
<methodCall>
  <methodName>example</methodName>
  <params>
   <param>
     <value>
       <struct>
         <member>
           <name>
           account
           </name>
           <value>
           <string>mynick@avatar.realxtend.org:10001
           </string>
          </value>
        </member>
  </params>
</methodCall>
                       
@endcode

An example of a typical XML-RPC response would be:

@code
<?xml version="1.0"?>
<methodResponse>
    <params>
        <param>
            <value>
                <struct>
                    <member>
                        <name>sessionHash</name>
                        <value>
                            <string>3009d90c5e44afabee6a64ed3b70708a86fd06e4</string>
                        </value>
                    </member>
                 </struct>
            </value>
        </param>
     </params>
</methodResponse>
@endcode

If the interface user would like to make this kind of request/reply conversation with a server located at address 192.168.1.11:9000,
it could be done as follows:

@code

XMLRPCEPI* pCall = new XMLPCEPI;

// Create connection 

std::string server_address = 192.168.1.11;
std::string server_port = 9000;

pCall->Connect(server_address, server_port);

// Create call (same as above request)
std::string method = "example";
pCall->CreateCall(method);

// And value members into call.

pCall->AddMember("account", "mynick@avatar.realxtend.org:10001");

// Now call is ready, send it.

pCall->Send();

// If everything was ok the response will contain value "sessionHash"
// else exception is thrown.

std::string sessionHash;
try
{
  sessionHash = pCall->GetReply<std::string>("sessionHash");
} catch(XMLRPCException& ex)
{
	//It did not contain? Read error message (and read it also from reply). 
	std::cout<<" Error: "<<ex.getMessage();
	
	// This is valid only for Rex-server: 
	// And if you are sure that the server responded something try to read the server message (assuming that the server has replied with a message).  
	// std::cout<<" Server replied: "<<pCall->GetReply<std::string>("message");
} 

// Now you can either continue reading or create new call or.. 
delete pCall;
pCall = 0;
@endcode

Note that each time when you call @p XMLRPCEPI::CreateCall() old call will be removed and after @p XMLRPCEPI::Send() old reply will be removed from memory. 

*/
