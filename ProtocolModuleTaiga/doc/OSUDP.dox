/**

\page OSUDP Interfacing with the OpenSim world using OSUDP messages

Once the OpenSimProtocolModule has established the server connection, any client modules may use
the provided packet services to send and respond to OSUDP messages that are transmitted between
the client and the simulation server.

When OpenSimProtocolModule is initialized, it creates a boost shared pointer to the NetManager class
which handles the low-level UDP packet traffic. NetManager takes the message template file
(located at /bin/data/message_template.msg by default) in its constructor. This message template file contains all
the valid messages.

During its initialization, the module registers "OpenSimNetworkIn" event category for the inbound and "OpenSimNetworkOut"
for the outbound messages. To receive the messages trought the event system, hook up for these events in your own module.

\section message_format The Message Format

	The OSUDP message format is described in the Second Life Wiki http://wiki.secondlife.com/wiki/Message_Layout .
	If you want to add a new custom message, add it to the template file using the correct syntax.
	It's advised to add the new messages to	the end of the file. You will also need to keep the file \ref RexProtocolMsgIDs.h
	up-to-date. However, at the moment adding new messages is not that usable because on the server side the protocol cannot
	be (yet) extended.
	
\section receiving_messages Receiving messages

	The OpenSimModule passes the received messages as events registered to the "OpenSimNetworkIn" event category. You can handle
	these events in your module's HandleEvent function. \ref OpeSimProtocol::Events::NetworkEventInboundData contains pointer to
	the message data and the id number. The message id number works also as the event id.
	
	Reading of data from the message is easy. For example, let's consider the following AgentMovementComplete message:
	\code
{
	AgentMovementComplete Low 250 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		Data			Single
		{	Position		LLVector3 }
		{	LookAt			LLVector3 }
		{	RegionHandle	U64		}
		{	Timestamp		U32	}
	}
	{
		SimData			Single
		{	ChannelVersion	Variable 2      }
	}
}	
	\endcode
	
	To retrieve the data from the message, use the corresponding reading function of the variable type. For example, the type of the
	first variable (AgentID) is LLUID, so one must use the \ref ReadUUID function. See \ref NetInMessage for all the reading functions.
	Before starting read the data, it might wise to reset the message reading using the \ref NetInMessage::ResetReading function because
	you cannot now if the message has already been handled by some other handler. You can skip variables using \ref NetInMessage::SkipToNextVariable .
	If you want to skip to a spesific variable by name, use \ref NetInMessage::SkipToFirstVariableByName .
	
	Here's a bit more in-depth example:
	
	\code
void SampleModule::PostInitialize()
{
	// OpenSimCatID is Core::event_category_id_t member variable of this class
	OpenSimCatID = framework_->GetEventManager()->QueryEventCategory("OpenSimNetworkIn");
}

// ...

bool SampleModule::HandleEvent(
	Core::event_category_id_t category_id,
	Core::event_id_t event_id,
	Foundation::EventDataInterface* data)
{
	if (category_id == OpenSimCatID)
		SampleMessageEventHandler(data)
}

// ...

void SampleMessageEventHandler(Foundation::EventDataInterface* data)
{
	OpenSimProtocolNetworkEventInboundData *net_data = dynamic_cast<OpenSimProtocol::NetworkEventInboundData *>(data);
	
	net_data->message->ResetReading();
	
	RexUUID id = net_data->message->ReadUUID();
	uint8_t something = net_data->message->ReadU8();
	net_data->message->SkipToFirstVariableByName("Message");
	std::string msg = net_data->message->ReadString();
	// etc...
}
	\endcode

	\section sending_messages Sending messages

	In order to be able to send messages, you need the pointer to the network interface. This can be done safely by using the
	boost smart pointers. If you are using the pointer to the network interface as a class member variable, you have to use boost::weak_ptr.
	Here's a demonstration for creating and using it:
	
	\code
// In your class declaration.
boost::weak_ptr<OpenSimProtocol::OpenSimProtocolModule> netInterface;

// ...

// Create a weak pointer
netInterface = framework_->GetModuleManager()->GetModule<OpenSimProtocol::OpenSimProtocolModule>
		(Foundation::Module::MT_OpenSimProtocol);

// Create a shared pointer.
boost::shared_ptr<OpenSimProtocol::OpenSimProtocolModule> sp = netInterface_.lock();
// Try to get a raw pointer.
if (!sp.get())
{
    MyModule::LogError("Getting network interface failed.");
    return;
}

// Succeeded. Now we're able to use the raw pointer.
NetOutMessage *m = sp->StartMessageBuilding(RexNetMsgChatFromViewer);
	\endcode

	Here's in example of sending a message with single blocks:

	\code
// The message template for reference, from message_template.msg.

// ChatFromViewer
// Specifies the text to be said and the "type", 
// normal speech, shout, whisper.
// with the specified radius
/*
{
	ChatFromViewer Low 80 NotTrusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID		}
		{	SessionID		LLUUID		}
	}
	{
		ChatData			Single
		{	Message			Variable 2	}
		{	Type			U8			}
		{	Channel			S32			}
	}
}
*/

// Create the pointer.
boost::shared_ptr<OpenSimProtocol::OpenSimProtocolModule> net = 
	(framework_->GetModuleManager()->GetModule<OpenSimProtocol::OpenSimProtocolModule>(Foundation::Module::MT_OpenSimProtocol)).lock();	

// Get the message container.
NetOutMessage *m = net->StartMessageBuilding(RexNetMsgChatFromViewer);

// Add the data.
// AgentID
m->AddUUID(agentID);
// SessionID
m->AddUUID(sessionID);

// Message, note that type is Variable.
m->AddBuffer(text.length(), (uint8_t*)text.c_str());
// Type
m->AddU8(1);
//Channel
m->AddS32(0);

// Send the message.
net->FinishMessageBuilding(m);

	\endcode

	Here's an another example. This time we'll send a message which has a variable type block.

	\code
// The message template for reference, from message_template.msg.

// ObjectSelect
// Variable object data because rectangular selection can
// generate a large list very quickly.
/*
{
	ObjectSelect Low 110 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		ObjectData		Variable
		{	ObjectLocalID	U32	}
	}

}
*/

// Create the pointer.
boost::shared_ptr<OpenSimProtocol::OpenSimProtocolModule> net = 
	(framework_->GetModuleManager()->GetModule<OpenSimProtocol::OpenSimProtocolModule>(Foundation::Module::MT_OpenSimProtocol)).lock();	

// Get the empty container.
NetOutMessage *m = net->StartMessageBuilding(RexNetMsgObjectSelect);

// AgentID
m->AddUUID(agentID);
// SessionID
m->AddUUID(sessionID);

// Set the variable block count.
m->SetVariableBlockCount(object_id_list.size());
// Add the data.
for(size_t i = 0; i < object_id_list.size(); ++i)
	m->AddU32(object_id_list[i]);

// Send the message.
net->FinishMessageBuilding(m);

	\endcode
	
	Here's an example how to add data to a block whose type is multiple (this type pretty rare though):
	
	\code
// Test Message
/*
{
	TestMessage Low 1 NotTrusted Zerocoded
	{
		TestBlock1		Single
		{	Test1		U32	}
	}
	{
		NeighborBlock		Multiple		4
		{	Test0		U32	}
		{	Test1		U32	}
		{	Test2		U32	}
	}
}
*/

// Create the pointer.
boost::shared_ptr<OpenSimProtocol::OpenSimProtocolModule> net = 
	(framework_->GetModuleManager()->GetModule<OpenSimProtocol::OpenSimProtocolModule>(Foundation::Module::MT_OpenSimProtocol)).lock();	

// Get the empty container.
NetOutMessage *m = net->StartMessageBuilding(RexNetMsgTestMessage);

m->AddU32(test1);

// Add the data for multiple block.
for(size_t i = 0; i < 4; ++i)
{
	m->AddU32(test0);
	m->AddU32(test1);
	m->AddU32(test2);
}

// Send the message.
net->FinishMessageBuilding(m);
	\endcode
	
	For code reference, see \ref OpenSimProtocolClient

*/
