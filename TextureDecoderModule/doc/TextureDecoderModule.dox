/**

\page TextureDecoderModule The texture decoder module

	TextureDecoderModule implements Foundation::TextureServiceInterface and handles downloading & decoding of texture data. It 		currently supports the JPEG2000 format through the OpenJpeg library.

	The TextureService is currently used by the \ref OgreRenderingModule to implement texture loading.

	\section textureservice_TDM Acquiring and using the TextureService

	An example of querying the existence of the TextureService, and using it to request a texture decode:

\code	
if (service_manager->IsRegistered(Foundation::Service::ST_Texture))
{
	boost::shared_ptr<Foundation::TextureServiceInterface> texture_service = 
		service_manager->GetService<Foundation::TextureServiceInterface>(Foundation::Service::ST_Texture).lock();            
 
	Core::request_tag_t tag = texture_service->RequestTexture(texture_id); 
}
\endcode
	
	A RESOURCE_READY event will be sent when the texture has been downloaded and decoded. Like elsewhere when handling resource & asset requests, request tags are used. See \ref Resources for more details.

	The resource returned will implement the Foundation::TextureInterface abstract interface, and is actually implemented in the class TextureDecoder::TextureResource.

	\section implementation_TDM Implementation details

	Decoding of JPEG2000 images can be time-consuming. Therefore the TextureDecoderModule launches a dedicated thread
	for handling the texture decoding, so on multi-core systems it can run on another core than the main viewer loop.	
*/