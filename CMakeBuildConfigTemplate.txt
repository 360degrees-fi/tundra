# The CMakeBuildConfigTemplate.txt defines the default build settings
# that are used when you build a clean checkout.

# CMakeBuildConfigTemplate.txt is only a template file! Changes to that file
# do not have any effect on the actual CMake execution.

# For the actual configuration, the file CMakeBuildConfigTemplate.txt gets 
# copied to CMakeBuildConfig.txt, in which you can customize your own settings.

# The CMakeBuildConfig.txt is not part of the repository, and do not add it there!
# The idea is that everyone can customize the set of modules to build using that 
# file, without having to fear about an accidental commit of these changes.

# Configure the use of Caelum. http://www.ogre3d.org/tikiwiki/Caelum
if (MSVC OR APPLE)
  SET(CAELUM 0)
  configure_caelum ()
endif()

# Configure the use of Hydrax, http://www.ogre3d.org/tikiwiki/Hydrax
if (MSVC)
    SET(HYDRAX 0)
    #configure_hydrax ()
endif()

# Configure the use of SkyX, http://www.ogre3d.org/tikiwiki/SkyX
if (MSVC)
    SET(SKYX 0)
    #configure_skyx()
endif()

# If WINDOWS_APP == 0, the console (output log) window is created and shown when the application starts on Windows.
# If WINDOWS_APP == 1, this window is not shown. This flag only affects when building on Windows.
SET(WINDOWS_APP 0)

# Enable the following flag to add compile with support for a built-in execution time profiler.
#add_definitions(-DPROFILING)

# Enable js profiling?
# add_definitions -(DENABLE_JS_PROFILING)

# If the following flag is defined, memory leak checking is enabled in all modules when building on MSVC.
if (MSVC)
    add_definitions(-DMEMORY_LEAK_CHECK)
endif()

# Enables Open Asset Import Library, which can be used to import various
# mesh formats.
SET(OPENASSETIMPORT 0)
if (MSVC)
#    SET(OPENASSETIMPORT 1)
endif()

# Enables Ogre asset editor module.
SET(OGREASSETEDITOR 1)

SET(HAVE_OPENDOCUMENT_SUPPORT 1)

use_package(OPENAL)
use_package(OGG)
use_package(VORBIS)

# The following are the core modules that are required for the project to build. None of these can be omitted.
add_subdirectory(Framework)
add_subdirectory(Scene)
add_subdirectory(Tundra)

add_subdirectory(Asset)
add_subdirectory(Audio)
add_subdirectory(Console)
add_subdirectory(Input)
add_subdirectory(Ui)

add_subdirectory(OgreRenderingModule)
add_subdirectory(KristalliProtocolModule)
if (HAVE_OPENDOCUMENT_SUPPORT)
   add_definitions(-DHAVE_OPENDOCUMENT_SUPPORT)
   add_subdirectory(OpenDocuments)
endif()

add_subdirectory(StreamsModule)

# The AddEntityComponent macros must appear before any of the add_subdirectory() directives for modules that use the ECs, or otherwise
# they will not be able to conditionally compile the EC.

# The following EC's are declared by TundraLogicModule and are optional. You may comment these lines out to disable any ECs you do not want to include.

AddEntityComponent(EntityComponents/EC_Highlight EC_Highlight)
AddEntityComponent(EntityComponents/EC_Sound EC_Sound)
AddEntityComponent(EntityComponents/EC_HoveringText EC_HoveringText)
AddEntityComponent(EntityComponents/EC_ParticleSystem EC_ParticleSystem)
AddEntityComponent(EntityComponents/EC_QmlApp EC_QmlApp)
AddEntityComponent(EntityComponents/EC_Billboard EC_Billboard)
AddEntityComponent(EntityComponents/EC_TransformGizmo EC_TransformGizmo)

#AddEntityComponent(EntityComponents/EC_Light EC_Light)
#AddEntityComponent(EntityComponents/EC_Touchable EC_Touchable)
#AddEntityComponent(EntityComponents/EC_PlanarMirror EC_PlanarMirror)
#AddEntityComponent(EntityComponents/EC_ProximityTrigger EC_ProximityTrigger)

# The following is by both PythonScriptModule and JavascriptModule. It is optional.
AddEntityComponent(EntityComponents/EC_Script EC_Script)

add_subdirectory(TundraLogicModule)
add_subdirectory(AvatarModule)          # Depends on OgreRenderingModule.
add_subdirectory(AssetModule)
add_subdirectory(EnvironmentModule)     # Depends on OgreRenderingModule.
add_subdirectory(PhysicsModule)         # Depends on OgreRenderingModule.

# The following are optional.
# Tool for editing world scene data. Requires EC_DynamicComponent. Depends on OgreRenderingModule.
# Contains also SceneStructureModule, which allows accessing, editing, importing and exporting of scene structure data
add_subdirectory(ECEditorModule)
if (OGREASSETEDITOR)
    add_subdirectory(OgreAssetEditorModule) # Enables Ogre-specific asset editors. Depends on OgreRenderingModule.
endif()
add_subdirectory(DebugStatsModule)      # Enables a developer window for debugging. Depends on OgreRenderingModule and EnvironmentModule.
#add_subdirectory(PythonScriptModule)    # Allows Python-created modules and scene script instances. Depends on OgreRenderingModule and AvatarModule
add_subdirectory(JavascriptModule)      # Allows QtScript-created scene script instances.
if (OPENASSETIMPORT)
    add_subdirectory(OpenAssetImport)        # Allows import of various mesh file formats
endif()

if (MSVC)
#    add_subdirectory(MumbleVoipModule)   # VOIP communication using the Mumble library. Depends on OgreRenderingModule.
endif()

add_subdirectory(SpeexVoipModule)
