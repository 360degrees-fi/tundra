/**

\page AssetModule Using the asset module

	Below is a description on how to use the public interface of the AssetModule. It implements Foundation::AssetServiceInterface 
	and Foundation::AssetInterface for retrieving and using assets. Assets are a way to store in-world content as blobs 
	of raw binary data, and come in various types (texture, 3D mesh, sound etc.) 
	
	\section acquiring_AS Acquiring the AssetService

	Clients should not need to get at the AssetModule directly, but get the asset service through 
	Foundation::ServiceManager::GetService(). Note that theoretically the asset service can get loaded and
	unloaded at will, so it should perhaps be re-acquired every time you need it.

	Example of acquiring the AssetService:

\code
if (service_manager->IsRegistered(Foundation::Service::ST_Asset))
{
    Foundation::AssetServiceInterface* asset_service = service_manager->GetService<Foundation::AssetServiceInterface>(Foundation::Service::ST_Asset);
    // do something with the asset service...
\endcode

	\section getasset_AS Getting an asset

	To get a complete asset, call Foundation::AssetServiceInterface::GetAsset() with the asset identifier
	(UUID for legacy UDP assets) and asset type in text form. If the asset is found in cache, a pointer to the corresponding
	Foundation::AssetInterface will be returned. If the asset is not found in cache, a null pointer is returned.
	Note that if the asset is not found, GetAsset() will not automatically queue an asset download request.

	To get an incomplete asset, when it is still a transfer in progress, call Foundation::AssetServiceInterface::GetIncompleteAsset().
	Compared to GetAsset(), you have to specify how many bytes from the beginning of the asset you require at minimum.
	If there is enough data, a new temporary asset will be constructed and a pointer returned to it.
	Like GetAsset(), GetIncompleteAsset() will not queue an asset download request.

	\section requestasset_AS Requesting an asset download

	If an asset was not found in the cache by using GetAsset(), you likely want to initiate a transfer for it. The function
	Foundation::AssetServiceInterface::RequestAsset() can be used for this. Like GetAsset(), it requires the 
	asset identifier and type. An unique request tag will be returned, by which you can identify your request, and which 
        will be later used in the ASSET_READY event.

	The progress of an asset download can be queried with the function Foundation::AssetServiceInterface::QueryAssetStatus().
	It takes pointers to 3 unsigned integer variables, which will be filled, in order, with the asset data size
	(0 if still unknown), total amount of bytes received so far, and continuous bytes received from the asset beginning.

	Note that textual asset types are used in the asset requests for expandability, though internally the default UDP asset transfer 
	uses hardcoded number identifiers. See RexTypes.h for definitions of the asset types, and functions to convert between
	number & textual asset type names.
	
	Also, note that if getting an asset immediately is not a concern, it is possible to do a RequestAsset() for an asset that
	is already in cache and still get an event for it during the next update cycle of the framework.

	Example of getting an asset, and requesting its download if not found:
	
\code
Foundation::AssetPtr mesh_asset = asset_service->GetAsset(mesh_asset_id, "Mesh");
Core::request_tag_t tag;
if (!mesh_asset)
{
    tag = asset_service->RequestAsset(id, "Mesh");
}
\endcode

	\section assetproviders_AS Asset providers

	Internally, the asset service uses asset providers (see Foundation::AssetProviderInterface) to perform the actual asset downloading.
	These can implement different ways to download asset data. For example legacy UDP asset transfers are implemented by Asset::UDPAssetProvider.

	A new asset provider can be registered through Foundation::AssetServiceInterface::RegisterAssetProvider(). 

	Note that asset providers must, upon completing download of an asset, add it by themselves to the asset service's cache, using
	Foundation::AssetServiceInterface::StoreAsset().	


	\section assetevents_AS Asset events

	Events with the category "Asset" will be sent informing of the status of asset downloads. These are defined in AssetEvents.h. It is the responsibility of asset providers to send these events; other modules should
        not send them.

	\subsection assetready_AS ASSET_READY

	ASSET_READY event with the data structure Asset::Events::AssetReady will be sent when a download of an asset is complete. A separate event is sent for each request made for the same asset (each with unique request tag.)
	When handling an ASSET_READY event from within a module, only return true (event handled and should not be propagated) if the request tag matches a request you made. Alternatively it is safe to always return false.

	\subsection assetprogress_AS ASSET_PROGRESS

	ASSET_PROGRESS events with the data structure Asset::Events::AssetProgress are sent periodically as the asset download progresses. These events are not sent multiple times for each request (there is no request tag field),
	so when handling them, return false so that other interested modules will get the event too.

	\subsection assetcanceled_AS ASSET_CANCELED

	If an asset download gets canceled due to for example network timeout, the ASSET_CANCELED event with data structure Asset::Events::AssetCanceled will be sent. These events are not sent multiple times for each request 
	(there is no request tag field), so when handling them, return false so that other interested modules will get the event too.

*/
