namespace Input
{
/**

\page Input_page Handling input

	Input is handled in a generic way which allows for support for nearly any
	kind of input device. Input is handled mostly by events. Some input which
	is not really practical to be handled with events are handled exclusively 
	via querying a service for the input state, but still in a generic fashion.
	
	Rather than depending on events alone for input handling, 
	InputServiceInterface can be used to directly poll the input state.
	
	See \ref EventSystem "Viewer event system" for handling events.
	
\section mapper_input Key mapping

	When dealing with input, you are never dealing with raw keycodes and
	hardware input events, but rather these are translated into generic input
	events. Mapper is used to handle the translation, and it can export and
	import the mappings to a file, so a key map configurations can be loaded
	and saved.
	
	For each input device or library, a module should be created that handles
	the input for that specific library / device.
	
	The Mapper should be usable with any input module.
	See Mapper for default key configuration.
	
\section state_input Input state

	Input has a state. Each state has their own set of h/w input events corresponding to generic input events,
        f.ex. in State_ThirdPerson 'A' and 'D' may be used to rotate the camera (and avatar) around, while in
        State_FreeCamera they can be used to slide the camera left or right. In this way keys can launch different
        events in different states. Input service should be used to set the state. Input states are currently
        hardcoded. See Input::State enumeration for more information.
        
\section events_input Input events
        
        <strong>Keyboard events are supported in the following way:</strong><p>
        A single key code that corresponds to an event, modifiers may be included (ctrl, alt and/or shift) as a bit flag.<br>
        An event is sent when key is pressed together with any modifier keys.<br>
        An event is sent when key or any modifier keys are released.<br>
        Keyboard input events are paired in such a way that corresponding key pressed and key released events are
        sequential, so you can easily derive one from the other.</p>
        
        There are also specific input events defined for generic actions, such as moving left, moving right, 
        rotating left and so on. These generic input events are the preferred way to handle input, rather than directly
        tying actions into key codes.

        <strong>Mouse movement is supported in the following way:</strong><p>
        Input sliders are used for continuous non-uniform input events such as mouse movement.
        A slider can be combined with a button press in the same device, such as mouse button, and a modifier key
        (ctrl, alt and/or shift). Slider events are not currently send as events, but need to be queried from an input service.
        See Foundation::InputServiceInterface for more information.</p>
        
        Some input events may only be sent in some input states. F.ex. buffered key pressed and released events
        are only sent in buffered state.
        
        All input events generally may be sent by any module or piece of code to achieve generic actions that can be easily
        overridden. As an example a bot AI module could sent movement events to control the bot avatar, rather than try 
        to directly control the avatar entity.
	
*/
}
